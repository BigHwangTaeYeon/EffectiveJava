## equals를 재정의 하려거든 hashCodeeh 재정의하라

#### equalse를 재정의한 클래스 모두에서 hashCode도 재정의해야 한다.
    hashCode 일반 규약을 어기게 되어 해당 클래스의 인스턴스를 컬렉션 원소로 사용할 때 문제를 일으킬 것이다.
    Object 명세
        - equals 비교에 사용되는 정보가 변경되지 않았다면 hashCode 메서드는 몇 번을 호출해도 일관되게 같은 값을 반환해야한다.
        - equals(Object)가 같다고 판단했다면, hashCode는 같은 값을 반환해야한다.
        - equals(Object)가 다르다고 판단했더라도 hashCode가 서로 다른 값을 반환할 필요는 없다.
        단, 다른 객체에 대해서는 다른 값을 반환해야 해시테이블 선능이 좋아진다.

#### hashCode 재정의를 잘못했을 때 크게 문제가 되는 조항은 두 번째다. 
    즉, 논리적으로 같은 객체는 같은 해시코드를 반환해야 한다.

```java
Map<Phone, String> map = new HashMap<>();
map.put(new getNumber(010,0011,2233), 'BigHwang');

map.get(new getNumber(010,0011,2233));
```
BigHwang이 아닌 null을 반환
getNumber 클래스는 hashCode를 재정의하지 않았기에 논리적 동치인 두객체가 서로 다른 해시코드를 반환하여 두번째 규약을 지키지 못한다.

Object 클래스는 임의의 개수만큼 객체를 받아 해시코드를 계산해주는 정적 메서드인 hash를 제공한다.
입력 인수를 담기 위한 배열이 만들어지고, 입력 중 기본 타입이 있다면 박싱과 언박싱도 거쳐야 하기에 속도는 더 느리다.
그러니 hash 메서드는 성능에 민감하지 않은 상황에서만 사용하자.
클래스가 불변이고 계산 비용이 크다면 캐싱하는 방식을 고려하자.

hashCode가 처음 불릴 때 계산하는 지연 초기화(lazy initialization) 전략
필드를 지연 초기화하려면 그 클래스를 스레드 안전하게 만들도록 신경 써야 한다.

해시코드를 지연 초기화하는 hashCode 메서드
```java
private int hashCode;

@Override public int hashCode(){
    int result = hashCode;
    if(result ==  0){
        result = Short.hashCode(areaCode); // 010
        result = 31 * result + Short.hashCode(prefix) // 0011
        result = 31 * result + Short.hashCode(lineNum) // 2233
        hashCode = result;
    }
    return result;
}
```